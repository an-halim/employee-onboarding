openapi: 3.0.0
info:
  title: HRIS KantorKu
  version: 1.0.0
  description: |
    OpenAPI spec untuk HRIS KantorKu.
servers:
  - url: https://api.sejutacita.id
security:
  - bearerAuth: []

tags:
  - name: Bank Account Validation
  - name: Benefit
  - name: Company Unit
  - name: Company
  - name: Employee Document
  - name: Employee
  - name: Leave Policy
  - name: Shift
  - name: Import

paths:
  /v2/hris/bank-account-validation/supported-bank/list:
    get:
      tags: [Bank Account Validation]
      summary: Daftar bank yang didukung untuk validasi nomor rekening
      operationId: getV2HrisBankAccountValidationSupportedBankList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBankResponse'
              examples:
                sample:
                  summary: Contoh daftar bank
                  value:
                    - bankCode: bank_ibk
                      bankName: Bank IBK
                    - bankCode: bca
                      bankName: BCA
                    - bankCode: bank_mandiri
                      bankName: Bank Mandiri

  /v2/hris/benefit/list:
    get:
      tags: [Benefit]
      summary: Get V2 HRIS Benefit List
      operationId: getV2HrisBenefitList
      parameters:
        - $ref: '#/components/parameters/CompanyIdEq'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BenefitListResponse' }

  /v2/hris/benefit/one:
    post:
      tags: [Benefit]
      summary: Post V2 HRIS Benefit One
      operationId: postV2HrisBenefitOne
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BenefitCreateRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BenefitOneResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /v2/hris/company-unit-item/list:
    get:
      tags: [Company Unit]
      summary: Get V2 HRIS Company Unit Item List
      operationId: getV2HrisCompanyUnitItemList
      parameters:
        - $ref: '#/components/parameters/Skip'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/CompanyIdEq'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/CompanyUnitIdEq'
        - $ref: '#/components/parameters/With'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/ParentIdIsNull'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CompanyUnitItemListResponse' }

  /v2/hris/company-unit/list:
    get:
      tags: [Company Unit]
      summary: Get V2 HRIS Company Unit List
      operationId: getV2HrisCompanyUnitList
      parameters:
        - $ref: '#/components/parameters/CompanyIdEq'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/IdEq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CompanyUnitListResponse' }

  /v2/hris/company/custom-employee-data/list:
    get:
      tags: [Company]
      summary: Get V2 HRIS Company Custom Employee Data List
      operationId: getV2HrisCompanyCustomEmployeeDataList
      parameters:
        - $ref: '#/components/parameters/CompanyIdEq'
        - $ref: '#/components/parameters/Limit20'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomEmployeeDataListResponse' }

  /v2/hris/company/document-type/list:
    get:
      tags: [Company]
      summary: Get V2 HRIS Company Document Type List
      operationId: getV2HrisCompanyDocumentTypeList
      parameters:
        - $ref: '#/components/parameters/CompanyIdEq'
        - in: query
          name: status_eq
          schema: { type: string, example: available, default: available }
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CompanyDocumentTypeListResponse' }

  /v2/hris/company/one:
    get:
      tags: [Company]
      summary: Get V2 HRIS Company One
      operationId: getV2HrisCompanyOne
      parameters:
        - $ref: '#/components/parameters/With'
        - $ref: '#/components/parameters/IdEq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CompanyOneResponse' }

  /v2/hris/employee/document/list:
    get:
      tags: [Employee Document]
      summary: Get V2 HRIS Employee Document List
      operationId: getV2HrisEmployeeDocumentList
      parameters:
        - in: query
          name: host_eq
          schema: { type: string, example: production-sejutacita-id, default: production-sejutacita-id }
        - in: query
          name: path_eq
          schema:
            type: string
            example: companies/4a358946-.../employee-documents/.../age.png
        - $ref: '#/components/parameters/With'
        - $ref: '#/components/parameters/CompanyIdEq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmployeeDocumentListResponse' }

  /v2/hris/employee/document/one:
    post:
      tags: [Employee Document]
      summary: Post V2 HRIS Employee Document One
      operationId: postV2HrisEmployeeDocumentOne
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, company_document_type_id, company_id]
              properties:
                company_document_type_id: { type: string, format: uuid }
                company_id: { type: string, format: uuid }
                file: { type: string, format: binary }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmployeeDocumentOneResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /v2/hris/employee/list:
    get:
      tags: [Employee]
      summary: Get V2 HRIS Employee List
      operationId: getV2HrisEmployeeList
      parameters:
        - $ref: '#/components/parameters/Skip'
        - $ref: '#/components/parameters/Limit51'
        - $ref: '#/components/parameters/CompanyIdEq'
        - in: query
          name: employee_status_in
          schema: { type: string, example: active, default: active }
        - $ref: '#/components/parameters/Search'
        - in: query
          name: employee_code_eq
          schema: { type: string, example: '21124312', default: '21124312' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmployeeListResponse' }

  /v2/hris/employee/one:
    get:
      tags: [Employee]
      summary: Get V2 HRIS Employee One
      operationId: getV2HrisEmployeeOne
      parameters:
        - in: query
          name: user_id_eq
          schema: { type: string, format: uuid, example: 00000000-65fa-cef3-9e50-c300135e6231, default: 00000000-65fa-cef3-9e50-c300135e6231 }
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BaseResponse' }
              examples:
                notFound:
                  value:
                    code: 404
                    data: null
                    info: employee not found
                    messageId: EMPLOYEE_NOT_FOUND
                    requestId: f0a5bf08-b12c-44e6-a958-eefcbf137b39
                    traceId: cb011087de677320528e4779f7c88499
    post:
      tags: [Employee]
      summary: Post V2 HRIS Employee One
      operationId: postV2HrisEmployeeOne
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EmployeeCreateRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BaseResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /v2/hris/employee/stat:
    get:
      tags: [Employee]
      summary: Get V2 HRIS Employee Stat
      operationId: getV2HrisEmployeeStat
      parameters:
        - $ref: '#/components/parameters/CompanyIdEq'
        - in: query
          name: accumulator
          schema: { type: string, example: count, default: count }
        - in: query
          name: for_feature
          schema: { type: string, example: employee, default: employee }
        - in: query
          name: employee_status_in
          schema: { type: string, example: active, default: active }
        - $ref: '#/components/parameters/Search'
        - in: query
          name: group
          schema: { type: string, example: branch, default: branch }
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit100'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmployeeStatListResponse' }

  /v2/hris/leave-policy/list:
    get:
      tags: [Leave Policy]
      summary: Get V2 HRIS Leave Policy List
      operationId: getV2HrisLeavePolicyList
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - in: query
          name: category_in
          schema: { type: string, example: annualLeave, default: annualLeave }
        - $ref: '#/components/parameters/Limit15'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LeavePolicyListResponse' }

  /v2/hris/shift/per-branch/list:
    get:
      tags: [Shift]
      summary: Get V2 HRIS Shift Per Branch List
      operationId: getV2HrisShiftPerBranchList
      parameters:
        - $ref: '#/components/parameters/Limit1000'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ShiftPerBranchListResponse' }

  /v2/hris/import-employee/file:
    post:
      tags: [Import]
      summary: Bulk Add Employee
      operationId: postV2HrisImportEmployeeFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file: { type: string, format: binary }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ImportEmployeeResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Skip:
      in: query
      name: skip
      schema: { type: integer, default: 0, example: 0, minimum: 0 }
    Offset:
      in: query
      name: offset
      schema: { type: integer, default: 0, example: 0, minimum: 0 }
    Limit:
      in: query
      name: limit
      schema: { type: integer, default: 2, example: 2, minimum: 1 }
    Limit15:
      in: query
      name: limit
      schema: { type: integer, default: 15, example: 15, minimum: 1 }
    Limit20:
      in: query
      name: limit
      schema: { type: integer, default: 20, example: 20, minimum: 1 }
    Limit51:
      in: query
      name: limit
      schema: { type: integer, default: 51, example: 51, minimum: 1 }
    Limit100:
      in: query
      name: limit
      schema: { type: integer, default: 100, example: 100, minimum: 1 }
    Limit1000:
      in: query
      name: limit
      schema: { type: integer, default: 1000, example: 1000, minimum: 1 }
    Search:
      in: query
      name: search
      schema: { type: string, default: '', example: '' }
    Sort:
      in: query
      name: sort
      schema: { type: string, example: created_at, default: created_at }
    With:
      in: query
      name: with
      schema: { type: string, example: feature_list }
    CompanyIdEq:
      in: query
      name: company_id_eq
      schema:
        type: string
        format: uuid
        example: 4a358946-3e84-4d55-a586-07c848bababb
        default: 4a358946-3e84-4d55-a586-07c848bababb
    CompanyUnitIdEq:
      in: query
      name: company_unit_id_eq
      schema:
        type: string
        format: uuid
        example: e37a30ce-33c8-4824-bd56-0fc4a77d431d
        default: e37a30ce-33c8-4824-bd56-0fc4a77d431d
    IdEq:
      in: query
      name: id_eq
      schema:
        type: string
        format: uuid
        example: f051811b-7a32-4994-ac03-8a8b5c06abde
        default: f051811b-7a32-4994-ac03-8a8b5c06abde
    ParentIdIsNull:
      in: query
      name: parent_id_isnull
      schema: { type: boolean, example: true, default: true }

  schemas:
    BaseResponse:
      type: object
      additionalProperties: false
      properties:
        code: { type: integer, example: 200 }
        data: {}
        info: { type: string, example: Success }
        messageId: { type: string, example: SUCCESS }
        requestId: { type: string, format: uuid, nullable: true }
        traceId: { type: string, nullable: true }

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            code: { type: integer, example: 400 }
            info: { type: string, example: validation error }
            messageId: { type: string, example: VALIDATION_ERROR }

    # BANK
    Bank:
      type: object
      additionalProperties: false
      properties:
        bankCode: { type: string }
        bankName: { type: string }
    ListBankResponse:
      type: array
      items: { $ref: '#/components/schemas/Bank' }

    # BENEFIT
    BenefitTypeEnum:
      type: string
      enum: [Transportation allowance, Learning Allowance, Internet Allowance, trest]
    BenefitDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        companyId: { type: string, format: uuid }
        type: { $ref: '#/components/schemas/BenefitTypeEnum' }
        prorate: { type: boolean }
        taxable: { type: boolean }
        absentProrate: { type: boolean }
        unpaidLeaveProrate: { type: boolean }
        jointHolidayProrate: { type: boolean }
        nationalHolidayProrate: { type: boolean }
        paidLeaveProrates: { nullable: true }
        version: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    BenefitListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                docs:
                  type: array
                  items: { $ref: '#/components/schemas/BenefitDoc' }
    BenefitCreateRequest:
      type: object
      additionalProperties: false
      properties:
        companyId: { type: string, format: uuid }
        type: { type: string }
        prorate: { type: boolean }
        taxable: { type: boolean }
        absentProrate: { type: boolean }
        unpaidLeaveProrate: { type: boolean }
        jointHolidayProrate: { type: boolean }
        nationalHolidayProrate: { type: boolean }
      required: [companyId, type, prorate, taxable]
    BenefitOneResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                doc: { $ref: '#/components/schemas/BenefitDoc' }

    # COMPANY UNIT
    CompanyUnitDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        companyId: { type: string, format: uuid }
        name: { type: string }
        label: { type: string }
        order: { type: integer }
        description: { nullable: true }
        deletable: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CompanyUnitListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                docs:
                  type: array
                  items: { $ref: '#/components/schemas/CompanyUnitDoc' }

    CompanyUnitItemDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        companyUnitId: { type: string, format: uuid }
        code:
          type: string
          enum: ['001', '', PRD, ENG, SLS]
        value: { type: string }
        note: { type: string }
        parentId: { nullable: true }
        haveDefaultShift: { type: boolean }
        employeeCount: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CompanyUnitItemListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                docs:
                  type: array
                  items: { $ref: '#/components/schemas/CompanyUnitItemDoc' }

    # COMPANY
    FeatureMeta:
      type: object
      additionalProperties: false
      properties:
        disbursementMethods:
          type: array
          items:
            type: string
            enum: [manual, va]
        maxEmployee: { type: integer }
        switchable: { type: boolean }
    FeatureListItem:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        featureId: { type: string, format: uuid }
        featureName: { type: string }
        featureLabel: { type: string }
        enabled: { type: boolean }
        meta: { $ref: '#/components/schemas/FeatureMeta' }
    SubscriptionInfo:
      type: object
      additionalProperties: false
      properties:
        companyId: { type: string }
        id: { type: string }
        type: { type: string, enum: ['', paid] }
        status: { type: string, enum: ['', active] }
        notes: { type: string }
        startDate: { type: string }
        expiresDate: { type: string }
        gracePeriodDate: { type: string }
        gracePeriodInterval: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CompanyDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        legalName: { nullable: true }
        slug: { type: string }
        emailDomain: { type: string }
        logo:
          type: string
          format: uri
        address: { nullable: true }
        npwp: { nullable: true }
        setupDone: { type: boolean }
        verified: { type: boolean }
        website: { nullable: true }
        featureList:
          type: array
          nullable: true
          items: { $ref: '#/components/schemas/FeatureListItem' }
        subscriptionInfo: { $ref: '#/components/schemas/SubscriptionInfo' }
        externalState:
          type: object
          additionalProperties: false
          properties:
            companyId: { type: string }
            setupSalarySetting: { type: boolean }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CompanyOneResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                doc: { $ref: '#/components/schemas/CompanyDoc' }

    # EMPLOYEE DOCUMENT
    EmployeeDocument:
      type: object
      additionalProperties: false
      properties:
        companyDocumentTypeId: { type: string, format: uuid }
        companyId: { type: string, format: uuid }
        employeeId: { nullable: true }
        requisite: { type: string }
        host: { type: string }
        path: { type: string }
        fullUrl:
          type: string
          format: uri
        signedUrl:
          type: string
          format: uri
        status: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        deletedAt: { nullable: true }
    EmployeeDocumentListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/EmployeeDocument' }
    EmployeeDocumentOneResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                doc: { $ref: '#/components/schemas/EmployeeDocument' }

    # EMPLOYEE
    EmployeeCreateBenefitItem:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        value: { type: integer }
        prorate: { type: boolean }
        taxable: { type: boolean }
        absentProrate: { type: boolean }
        unpaidLeaveProrate: { type: boolean }
        jointHolidayProrate: { type: boolean }
        nationalHolidayProrate: { type: boolean }
        customized: { type: boolean }
    EmployeeCreateDocument:
      type: object
      additionalProperties: false
      properties:
        host: { type: string }
        path: { type: string }
    EmployeeCreateRequest:
      type: object
      additionalProperties: false
      properties:
        name: { type: string }
        employeeCode: { type: string }
        branch: { type: string }
        position: { type: string }
        department: { type: string }
        companyEmail: { type: string }
        bankName: { type: string }
        bankAccountHolder: { type: string }
        bankAccountNumber: { type: string }
        currency: { type: string }
        employeeType: { type: string, enum: [permanent, contract] }
        paymentSchedule: { type: string, example: Monthly }
        salaryBasis: { type: string, enum: [month, shift] }
        salary: { type: integer }
        startDate: { type: string, format: date }
        resignDate: { type: string, format: date }
        shiftId: { type: string, format: uuid }
        directApprovalId: { type: string, format: uuid }
        employeeDetailBirthDate: { type: string, format: date }
        employeeDetailGender: { type: string }
        employeeDetailIdType: { type: string }
        employeeDetailIdNumber: { type: string }
        employeeDetailMaritalStatus: { type: string }
        employeeDetailPersonalEmail: { type: string }
        employeeDetailPhone: { type: string }
        employeeDetailEmergencyContact: { type: string }
        employeeDetailEmergencyContactName: { type: string }
        employeeDetailRelationWithEmergencyContact: { type: string }
        employeeDetailReligion: { type: string }
        taxConfig: { type: string, enum: [Gross, 'Gross Up', Nett] }
        taxStatus: { type: string }
        taxPtkp: { type: string }
        taxNpwp: { type: string }
        companyUnitItemIds:
          type: array
          items: { type: string, format: uuid }
        documents:
          type: array
          items: { $ref: '#/components/schemas/EmployeeCreateDocument' }
        benefits:
          type: array
          items: { $ref: '#/components/schemas/EmployeeCreateBenefitItem' }
        customData:
          type: array
          items: {}
    EmployeeDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        employeeCode: { type: string }
        employeeStatus: { type: string }
        employeeType: { type: string }
        branch: { type: string }
        branchId: { type: string, format: uuid }
        position: { type: string }
        positionId: { type: string, format: uuid }
        department: { type: string }
        departmentId: { type: string, format: uuid }
        companyEmail: { type: string }
        companyId: { type: string, format: uuid }
        processorId: { type: string, format: uuid }
        bankName: { type: string }
        bankAccountHolder: { type: string }
        bankAccountNumber: { type: string }
        salaryBasis: { type: string }
        salary: { nullable: true }
        joinDate: { type: string, format: date-time }
        resignDate: { type: string, format: date-time, nullable: true }
        profilePictUrl: { type: string, nullable: true }
        taxConfig: { type: string }
        taxStatus: { type: integer }
        taxStatusDesc: { type: string }
        taxPtkp: { type: string }
        taxNpwp: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        deletedAt: { nullable: true }
        version: { type: integer }
        errorCounter:
          type: object
          additionalProperties: false
          properties:
            fixedError: { type: integer }
            totalRequiredField: { type: integer }
        errorFields:
          type: array
          items: {}
    EmployeeListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                docs:
                  type: array
                  items: { $ref: '#/components/schemas/EmployeeDoc' }

    # EMPLOYEE STAT
    EmployeeStatDoc:
      type: object
      additionalProperties: false
      properties:
        department: { type: string, nullable: true }
        count: { type: integer }
        branch: { type: string, nullable: true }
        position: { type: string, nullable: true }
        companyId: { nullable: true }
    EmployeeStatListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                docs:
                  type: array
                  items: { $ref: '#/components/schemas/EmployeeStatDoc' }

    # LEAVE POLICY
    AnnualLeavePolicy:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        leavePolicyId: { type: string, format: uuid }
        jointHolidayPolicy: { type: string }
        carryForwardRule: { type: string }
        carryForwardAmountDay: { type: integer }
        firstYearIsActivated: { type: boolean }
        type: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    AttendanceStatus:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        companyId: { type: string, format: uuid }
        name: { type: string }
        type: { type: string }
        action: { type: string }
        default: { type: boolean }
        sequence: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    LeavePolicyDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        category: { type: string }
        description: { type: string }
        annualLeavePolicy: { $ref: '#/components/schemas/AnnualLeavePolicy' }
        attendanceStatusId: { type: string, format: uuid }
        attendanceStatus: { $ref: '#/components/schemas/AttendanceStatus' }
        eligibleForAllEmployees: { type: boolean }
        employeesCompanyUnitItemCount: { type: integer }
        isMaxLeaveDurationUnlimited: { type: boolean }
        isAllowDelete: { type: boolean }
        isDeleted: { type: boolean }
        maxLeaveDurationDay: { nullable: true }
        maxRequestDate: { nullable: true }
        maxWaitingTimeAutoApproveDay: { type: integer }
        eligibleEmployeeCompanyUnitItemIds:
          type: array
          items: {}
        eligibleEmployeeEmploymentStatuses:
          type: array
          items: {}
        employeeEligibilities:
          type: object
          additionalProperties: false
        halfDayDuration: { nullable: true }
        lastModifiedBy: { nullable: true }
        lastModifiedById: { nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    LeavePolicyListResponse:
      type: object
      additionalProperties: false
      properties:
        data:
          type: object
          properties:
            docs:
              type: array
              items: { $ref: '#/components/schemas/LeavePolicyDoc' }
            page: { type: integer }
            totalDocs: { type: integer }
            totalPages: { type: integer }
        messageId: { type: string, example: SUCCESS }

    # SHIFT
    Shift:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
    ShiftPerBranchDoc:
      type: object
      additionalProperties: false
      properties:
        branch: { type: string }
        shifts:
          type: array
          items: { $ref: '#/components/schemas/Shift' }
    ShiftPerBranchListResponse:
      type: object
      additionalProperties: false
      properties:
        data:
          type: object
          properties:
            docs:
              type: array
              items: { $ref: '#/components/schemas/ShiftPerBranchDoc' }
            page: { type: integer }
            totalDocs: { type: integer }
            totalPages: { type: integer }
        messageId: { type: string, example: SUCCESS }

    # IMPORT
    ImportEmployeeDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        companyId: { type: string, format: uuid }
        processorId: { type: string, format: uuid }
        filename: { type: string }
        link: { type: string }
        valid: { type: integer }
        invalid: { type: integer }
        total: { type: integer }
        expiredAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    ImportEmployeeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                doc: { $ref: '#/components/schemas/ImportEmployeeDoc' }


    CompanyDocumentTypeDoc:
      type: object
      additionalProperties: false
      properties:
        id: { type: string, format: uuid }
        companyId: { type: string, format: uuid }
        name: { type: string }
        status: { type: string }
        requirements: { type: string }
        forRequisite: 
          type: string
          example: cv
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CompanyDocumentTypeListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                docs:
                  type: array
                  items: { $ref: '#/components/schemas/CompanyDocumentTypeDoc' }

    CustomEmployeeDataListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                docs:
                  type: array
                  items: {}
